import { useState, useEffect, useCallback, useRef } from 'react';
import { useAuth } from '@/hooks/useAuth';
import { aiDiaryService } from '@/services/ai-diary.service';
import { aiDiarySessionsService } from '@/services/ai-diary-sessions.service';
import { useToast } from '@/hooks/use-toast';

export interface ChatMessage {
  id: string;
  type: 'user' | 'ai' | 'system';
  content: string;
  suggestions?: string[];
  emotions?: any;
  analysis?: any;
  timestamp: string;
  isTyping?: boolean;
}

export function useAIDiaryChat() {
  const { user, session } = useAuth();
  const { toast } = useToast();
  
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [sessionId, setSessionId] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  
  const realtimeChannelRef = useRef<any>(null);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∑–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –ø–æ–∫–∞–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
  useEffect(() => {
    if (!user) return;
    
    const initSession = async () => {
      const currentSession = await aiDiarySessionsService.getCurrentSession(user.id);
      
      if (currentSession) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
        setSessionId(currentSession.session_id);
        const history = await aiDiarySessionsService.getSessionMessages(currentSession.session_id);
        
        // –ö–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å –≤ –ë–î —Å–æ–¥–µ—Ä–∂–∏—Ç –û–ë–ê —Å–æ–æ–±—â–µ–Ω–∏—è: –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–≤–µ—Ç AI
        const chatMessages: ChatMessage[] = [];
        history.forEach(msg => {
          // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          if (msg.message) {
            chatMessages.push({
              id: `${msg.id}_user`,
              type: 'user',
              content: msg.message,
              timestamp: msg.created_at
            });
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI
          if (msg.ai_response) {
            chatMessages.push({
              id: msg.id,
              type: 'ai',
              content: msg.ai_response,
              suggestions: msg.suggestions,
              emotions: msg.emotions,
              analysis: msg.analysis,
              timestamp: msg.created_at
            });
          }
        });
        
        setMessages(chatMessages);
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ Realtime –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        subscribeToSession(currentSession.session_id);
      } else {
        // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        setMessages([{
          id: 'welcome',
          type: 'system',
          content: '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è?',
          suggestions: [
            '–†–∞—Å—Å–∫–∞–∂—É –æ —Å–≤–æ–µ–º –¥–Ω–µ',
            '–•–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —Å—Ç—Ä–µ—Å—Å–µ',
            '–ö–∞–∫ –¥–µ–ª–∞?',
            '–ß—É–≤—Å—Ç–≤—É—é —Ç—Ä–µ–≤–æ–≥—É'
          ],
          timestamp: new Date().toISOString()
        }]);
      }
    };
    
    initSession();
    
    // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (realtimeChannelRef.current) {
        realtimeChannelRef.current.unsubscribe();
      }
    };
  }, [user]);
  
  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Realtime
  const subscribeToSession = (sessId: string) => {
    if (realtimeChannelRef.current) {
      realtimeChannelRef.current.unsubscribe();
    }
    
    console.log('[AI Diary] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Realtime –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessId);
    
    realtimeChannelRef.current = aiDiarySessionsService.subscribeToSession(
      sessId,
      (newMessage) => {
        console.log('[AI Diary] –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Realtime:', newMessage);
        handleNewAIMessage(newMessage);
      }
    );
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ AI —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Realtime
  const handleNewAIMessage = useCallback((aiMessageData: any) => {
    console.group('üì® Realtime Message Received');
    console.log('Message ID:', aiMessageData.id);
    console.log('Session ID:', aiMessageData.session_id);
    console.log('User Message:', aiMessageData.message);
    console.log('AI Response:', aiMessageData.ai_response);
    console.log('Has Suggestions:', aiMessageData.suggestions?.length || 0);
    console.groupEnd();
    
    // –û—á–∏—â–∞–µ–º fallback —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if ((window as any).__fallbackTimer) {
      clearTimeout((window as any).__fallbackTimer);
      delete (window as any).__fallbackTimer;
    }
    
    setIsTyping(false);
    
    setMessages(prev => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ–≥–æ AI —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
      const aiExists = prev.find(m => m.id === aiMessageData.id);
      if (aiExists) return prev;
      
      // –û–¥–Ω–∞ –∑–∞–ø–∏—Å—å –ë–î = –æ–¥–Ω–∞ –ø–∞—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (user + AI)
      const userMessageId = `${aiMessageData.id}_user`;
      const userExists = prev.find(m => m.id === userMessageId);
      
      const newMessages = [...prev];
      
      // –î–æ–±–∞–≤–ª—è–µ–º user —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑ optimistic update)
      if (!userExists && aiMessageData.message) {
        newMessages.push({
          id: userMessageId,
          type: 'user',
          content: aiMessageData.message,
          timestamp: aiMessageData.created_at
        });
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º AI —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –ø–µ—á–∞—Ç–∏
      if (aiMessageData.ai_response) {
        newMessages.push({
          id: aiMessageData.id,
          type: 'ai',
          content: '',
          suggestions: aiMessageData.suggestions || [],
          emotions: aiMessageData.emotions,
          analysis: aiMessageData.analysis,
          timestamp: aiMessageData.created_at,
          isTyping: true
        });
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∏
        setTimeout(() => typeMessage(aiMessageData.id, aiMessageData.ai_response), 0);
      }
      
      return newMessages;
    });
  }, []);
  
  // –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∏ –¥–ª—è AI –æ—Ç–≤–µ—Ç–æ–≤
  const typeMessage = (messageId: string, fullText: string) => {
    if (fullText.length <= 50) {
      // –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
      setTimeout(() => {
        setMessages(prev => prev.map(msg => 
          msg.id === messageId 
            ? { ...msg, content: fullText, isTyping: false }
            : msg
        ));
      }, 500);
    } else {
      // –î–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—á–∞—Ç–∞–µ–º –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ
      let currentIndex = 0;
      const typingSpeed = 30; // 30ms –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
      
      const typeNextChar = () => {
        if (currentIndex <= fullText.length) {
          const currentText = fullText.substring(0, currentIndex);
          setMessages(prev => prev.map(msg => 
            msg.id === messageId 
              ? { ...msg, content: currentText, isTyping: currentIndex < fullText.length }
              : msg
          ));
          currentIndex++;
          setTimeout(typeNextChar, typingSpeed);
        }
      };
      
      typeNextChar();
    }
  };
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendMessage = async (messageText: string) => {
    if (!user || !session || !messageText.trim()) return;
    
    setIsLoading(true);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ UI —Å—Ä–∞–∑—É
    const userMessage: ChatMessage = {
      id: `user_${Date.now()}`,
      type: 'user',
      content: messageText,
      timestamp: new Date().toISOString()
    };
    
    setMessages(prev => [...prev, userMessage]);
    
    try {
      console.group('ü§ñ AI Diary - Send Message');
      console.log('üì§ Request:', {
        userId: user.id,
        sessionId: sessionId || 'new session',
        messageLength: messageText.length,
        timestamp: new Date().toISOString()
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ backend
      const response = await aiDiaryService.sendMessage(
        session.access_token,
        user.id,
        messageText,
        sessionId,
        'ru'
      );
      
      console.log('üì• API Response:', {
        success: response?.success,
        hasData: !!response?.data,
        hasAiResponse: !!response?.data?.ai_response,
        hasSuggestions: response?.data?.suggestions?.length || 0,
        hasEmotions: !!response?.data?.emotions,
        savedEntryId: response?.data?.saved_entry_id,
        sessionId: response?.data?.session_id
      });
      console.groupEnd();
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
      if (!response || !response.data || typeof response.data !== 'object') {
        console.error('‚ùå Invalid API response format:', response);
        toast({
          title: '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞',
          description: '–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
          variant: 'destructive'
        });
        setIsLoading(false);
        return;
      }
      
      if (!response.success) {
        console.error('‚ùå API returned success=false:', response.data);
        toast({
          title: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
          description: '–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É',
          variant: 'destructive'
        });
        setIsLoading(false);
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      const requiredFields = ['ai_response', 'suggestions', 'emotions', 'analysis', 'session_id'];
      const missingFields = requiredFields.filter(field => !response.data[field]);
      
      if (missingFields.length > 0) {
        console.warn('‚ö†Ô∏è Missing fields in API response:', missingFields);
      }
      
      if (response.success) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º session_id
        const newSessionId = response.data.session_id;
        if (!sessionId) {
          setSessionId(newSessionId);
          aiDiaryService.setCurrentSessionId(newSessionId);
          subscribeToSession(newSessionId);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "AI –ø–µ—á–∞—Ç–∞–µ—Ç..."
        setIsTyping(true);
        
        // FALLBACK: –µ—Å–ª–∏ —á–µ—Ä–µ–∑ N —Å–µ–∫—É–Ω–¥ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Realtime, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä—É—á–Ω—É—é
        const isMock = Boolean(
          response?.data?.is_mock ||
          response?.data?.session_id?.startsWith?.('mock_session_') ||
          response?.data?.saved_entry_id?.startsWith?.('mock_')
        );
        const timeoutMs = isMock ? 1200 : 30000;
        
        const fallbackTimeout = setTimeout(() => {
          console.warn('‚ö†Ô∏è Realtime timeout - using fallback response');
          console.log('Fallback data:', {
            messageId: response.data.saved_entry_id,
            hasResponse: !!response.data.ai_response
          });
          
          if (response.data.ai_response) {
            const aiMessage: ChatMessage = {
              id: response.data.saved_entry_id || `ai_${Date.now()}`,
              type: 'ai',
              content: response.data.ai_response,
              suggestions: response.data.suggestions || [],
              emotions: response.data.emotions,
              analysis: response.data.analysis,
              timestamp: response.data.timestamp || new Date().toISOString()
            };
            
            setMessages(prev => {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
              const exists = prev.find(m => m.id === aiMessage.id);
              if (exists) return prev;
              return [...prev, aiMessage];
            });
            
            setIsTyping(false);
          }
        }, timeoutMs);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        (window as any).__fallbackTimer = fallbackTimeout;
      }
    } catch (error: any) {
      console.group('‚ùå AI Diary Error');
      console.error('Error details:', error);
      
      if (error.response) {
        console.error('Response status:', error.response.status);
        console.error('Response data:', error.response.data);
        
        // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
        if (error.response.status === 401) {
          toast({
            title: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
            description: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è',
            variant: 'destructive'
          });
        } else if (error.response.status === 500) {
          toast({
            title: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            description: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
            variant: 'destructive'
          });
        } else {
          toast({
            title: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏',
            description: `–°—Ç–∞—Ç—É—Å: ${error.response.status}`,
            variant: 'destructive'
          });
        }
      } else if (error.request) {
        console.error('No response received');
        toast({
          title: '–ù–µ—Ç —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º',
          description: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
          variant: 'destructive'
        });
      } else {
        console.error('Request setup error:', error.message);
        toast({
          title: '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞',
          description: error.message,
          variant: 'destructive'
        });
      }
      
      console.groupEnd();
      
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setMessages(prev => prev.filter(m => m.id !== userMessage.id));
      
      // –û—á–∏—â–∞–µ–º fallback —Ç–∞–π–º–µ—Ä
      if ((window as any).__fallbackTimer) {
        clearTimeout((window as any).__fallbackTimer);
        delete (window as any).__fallbackTimer;
      }
      
      setIsTyping(false);
    } finally {
      setIsLoading(false);
    }
  };
  
  // –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
  const startNewSession = async () => {
    if (!user) return;
    
    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–π Realtime –ø–æ–¥–ø–∏—Å–∫–∏
    if (realtimeChannelRef.current) {
      realtimeChannelRef.current.unsubscribe();
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    const newSession = await aiDiarySessionsService.createSession(user.id);
    setSessionId(newSession.session_id);
    // –°—Ä–∞–∑—É –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ Realtime –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    subscribeToSession(newSession.session_id);
    
    // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    setMessages([{
      id: 'welcome_new',
      type: 'system',
      content: '–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É. –û —á–µ–º —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?',
      suggestions: [
        '–†–∞—Å—Å–∫–∞–∂—É –æ —Å–≤–æ–∏—Ö –º—ã—Å–ª—è—Ö',
        '–•–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏',
        '–ù—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
        '–û–±—Å—É–¥–∏–º –ø–ª–∞–Ω—ã'
      ],
      timestamp: new Date().toISOString()
    }]);
    
    toast({
      title: '–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è',
      description: '–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞',
    });
  };
  
  // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é
  const endSession = async () => {
    if (!sessionId) return;
    
    // –û—á–∏—â–∞–µ–º fallback —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    if ((window as any).__fallbackTimer) {
      clearTimeout((window as any).__fallbackTimer);
      delete (window as any).__fallbackTimer;
    }
    
    await aiDiarySessionsService.endSession(sessionId);
    
    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç Realtime
    if (realtimeChannelRef.current) {
      realtimeChannelRef.current.unsubscribe();
    }
    
    setSessionId(null);
    setMessages([]);
    
    toast({
      title: '–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      description: '–í–∞—à–∞ –±–µ—Å–µ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏',
    });
  };
  
  // –ö–ª–∏–∫ –ø–æ suggestion
  const handleSuggestionClick = (suggestion: string) => {
    sendMessage(suggestion);
  };
  
  return {
    messages,
    sessionId,
    isLoading,
    isTyping,
    sendMessage,
    startNewSession,
    endSession,
    handleSuggestionClick
  };
}
