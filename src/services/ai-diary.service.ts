import { supabase } from '@/integrations/supabase/client';

export interface DiaryMessage {
  id: string;
  user_id: string;
  session_id: string;
  message_type: 'user' | 'ai' | 'system';
  message?: string;
  ai_response?: string;
  suggestions?: string[];
  emotions?: {
    primary: string;
    intensity: string;
    triggers: string[];
  };
  analysis?: {
    cognitive_distortions: string[];
    themes: string[];
    mood_score: number;
  };
  created_at: string;
}

interface SendMessageParams {
  userJwt: string;
  user_id: string;
  message: string;
  session_id: string | null;
  locale?: string;
}

interface AIResponse {
  success: boolean;
  message?: string;
  data?: {
    session_id: string;
    ai_response: string;
    suggestions?: string[];
    emotions?: any;
    analysis?: any;
    saved_entry_id: string;
    timestamp: string;
  };
}

const WEBHOOK_URL = 'https://mentalbalans.com/webhook';

class AIDiaryService {
  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ AI –¥–Ω–µ–≤–Ω–∏–∫
   */
  async sendMessage(params: SendMessageParams): Promise<AIResponse> {
    try {
      console.log('üì§ Sending message to webhook:', {
        user_id: params.user_id,
        session_id: params.session_id || 'NEW SESSION',
        message_length: params.message.length
      });
      
      const response = await fetch(`${WEBHOOK_URL}/ai-diary-message`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userJwt: params.userJwt,
          user_id: params.user_id,
          message: params.message,
          session_id: params.session_id,
          locale: params.locale || 'ru'
        })
      });
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –æ—à–∏–±–æ–∫
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Webhook error:', {
          status: response.status,
          statusText: response.statusText,
          body: errorText
        });
        
        if (response.status === 500) {
          throw new Error('–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        } else if (response.status === 401 || response.status === 403) {
          throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
        } else if (response.status === 400) {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.');
        }
        
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
      const responseText = await response.text();
      console.log('üì• Raw response length:', responseText.length);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
      if (!responseText || responseText.trim().length === 0) {
        throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
      }
      
      // –ü–∞—Ä—Å–∏–º JSON
      let data: AIResponse;
      try {
        data = JSON.parse(responseText);
      } catch (parseError) {
        console.error('‚ùå JSON parse error:', parseError);
        console.error('Response preview:', responseText.substring(0, 500));
        throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
      if (!data.success) {
        throw new Error('API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ' + (data.message || 'Unknown error'));
      }
      
      if (!data.data || !data.data.ai_response) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—Ç–≤–µ—Ç AI –≤ –¥–∞–Ω–Ω—ã—Ö');
      }
      
      console.log('‚úÖ Webhook success:', {
        session_id: data.data.session_id,
        response_length: data.data.ai_response.length,
        suggestions_count: data.data.suggestions?.length || 0
      });
      
      return data;
      
    } catch (error: any) {
      console.error('‚ùå Send message error:', error);
      
      // –ü–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (error.message.includes('Failed to fetch')) {
        throw new Error('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
      } else if (error.message.includes('NetworkError')) {
        throw new Error('–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.');
      } else if (error.message.includes('timeout')) {
        throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
      }
      
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π session_id –∏–∑ localStorage
   */
  getCurrentSessionId(): string | null {
    return localStorage.getItem('ai_diary_session_id');
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å session_id –≤ localStorage
   */
  setCurrentSessionId(sessionId: string): void {
    localStorage.setItem('ai_diary_session_id', sessionId);
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å session_id –∏–∑ localStorage
   */
  clearCurrentSessionId(): void {
    localStorage.removeItem('ai_diary_session_id');
  }
}

export const aiDiaryService = new AIDiaryService();
