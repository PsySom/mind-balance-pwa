import { supabase } from '@/integrations/supabase/client';

export interface DiaryMessage {
  id: string;
  user_id: string;
  session_id: string;
  message_type: 'user' | 'ai' | 'system';
  message?: string;
  ai_response?: string;
  suggestions?: string[];
  emotions?: {
    primary: string;
    intensity: string;
    triggers: string[];
  };
  analysis?: {
    cognitive_distortions: string[];
    themes: string[];
    mood_score: number;
  };
  created_at: string;
}

class AIDiaryService {
  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ AI –¥–Ω–µ–≤–Ω–∏–∫
   */
  async sendMessage(
    userJwt: string,
    userId: string,
    message: string,
    sessionId: string | null,
    locale: string = 'ru'
  ): Promise<any> {
    
    // –í–†–ï–ú–ï–ù–ù–û: Mock –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UI
    const USE_MOCK = true; // ‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ –Ω–∞ false –∫–æ–≥–¥–∞ n8n –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç
    
    if (USE_MOCK) {
      console.log('üé≠ Using MOCK response for testing');
      
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏ (–∫–∞–∫ –±—É–¥—Ç–æ –∂–¥–µ–º AI)
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      const isStress = message.toLowerCase().includes('—Å—Ç—Ä–µ—Å—Å') || 
                       message.toLowerCase().includes('—Ç—Ä–µ–≤–æ–≥');
      const isJoy = message.toLowerCase().includes('—Ä–∞–¥') || 
                    message.toLowerCase().includes('—Å—á–∞—Å—Ç–ª–∏–≤');
      
      let aiResponse = '';
      let suggestions = [];
      let emotion = 'trust';
      let moodScore = 5;
      
      if (isStress) {
        aiResponse = '–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ —Å—Ç—Ä–µ—Å—Å. –≠—Ç–æ –Ω–µ–ø—Ä–æ—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å —Å–µ–π—á–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?';
        suggestions = [
          'üßò –ö–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º?',
          'üòå –ü–æ–∫–∞–∂–∏ —Ç–µ—Ö–Ω–∏–∫—É —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏',
          'üìù –†–∞—Å—Å–∫–∞–∂—É —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç –ø–æ–¥—Ä–æ–±–Ω–µ–µ',
          'üí≠ –ß—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?'
        ];
        emotion = 'fear';
        moodScore = 4;
      } else if (isJoy) {
        aiResponse = '–ö–∞–∫ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ —Å–ª—ã—à–∞—Ç—å –æ –≤–∞—à–µ–π —Ä–∞–¥–æ—Å—Ç–∏! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å —Ç–∞–∫ –ø–æ—Ä–∞–¥–æ–≤–∞–ª–æ?';
        suggestions = [
          'üéâ –†–∞—Å—Å–∫–∞–∂—É —á—Ç–æ –º–µ–Ω—è –ø–æ—Ä–∞–¥–æ–≤–∞–ª–æ',
          'üí™ –•–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —É—Å–ø–µ—Ö–æ–º',
          'üéØ –ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ?',
          '‚ú® –ü–ª–∞–Ω–∏—Ä—É—é —Ä–∞–∑–≤–∏–≤–∞—Ç—å –¥–∞–ª—å—à–µ'
        ];
        emotion = 'joy';
        moodScore = 8;
      } else {
        aiResponse = '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤—ã—Å–ª—É—à–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–∞—Å. –û —á–µ–º —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?';
        suggestions = [
          'üòä –†–∞—Å—Å–∫–∞–∂—É –æ —Å–≤–æ–∏—Ö –º—ã—Å–ª—è—Ö',
          'ü§î –•–æ—á—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —á—É–≤—Å—Ç–≤–∞—Ö',
          'üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏–º –æ –ø–ª–∞–Ω–∞—Ö',
          'üåü –ß—Ç–æ –º–µ–Ω—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç'
        ];
        emotion = 'trust';
        moodScore = 6;
      }
      
      // Mock –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ API
      return {
        success: true,
        data: {
          session_id: sessionId || `mock_session_${Date.now()}`,
          ai_response: aiResponse,
          suggestions: suggestions,
          emotions: {
            primary: emotion,
            intensity: 'moderate',
            triggers: message.split(' ').slice(0, 3)
          },
          analysis: {
            cognitive_distortions: isStress ? ['catastrophizing'] : [],
            themes: ['–æ–±—â–µ–Ω–∏–µ', '—Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ'],
            mood_score: moodScore
          },
          saved_entry_id: `mock_entry_${Date.now()}`,
          locale: locale,
          timestamp: new Date().toISOString(),
          is_mock: true
        }
      };
    }
    
    // –†–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ webhook (–∫–æ–≥–¥–∞ USE_MOCK = false)
    console.log('[AI Diary Service] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', { userId, sessionId, messageLength: message.length });
    
    const response = await fetch('https://mentalbalans.com/webhook/ai-diary-message', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        userJwt,
        user_id: userId,
        message,
        session_id: sessionId,
        locale
      })
    });

    console.log('[AI Diary Service] –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status, response.statusText);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('[AI Diary Service] –û—à–∏–±–∫–∞ webhook:', errorText);
      throw new Error(`Webhook error! status: ${response.status}, message: ${errorText}`);
    }

    const text = await response.text();
    console.log('[AI Diary Service] –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:', text);
    
    if (!text || text.trim() === '') {
      console.error('[AI Diary Service] –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç webhook');
      throw new Error('Webhook –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
    }

    try {
      const data = JSON.parse(text);
      console.log('[AI Diary Service] –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:', data);
      return data;
    } catch (e) {
      console.error('[AI Diary Service] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e, '–¢–µ–∫—Å—Ç:', text);
      throw new Error('Webhook –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON');
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π session_id –∏–∑ localStorage
   */
  getCurrentSessionId(): string | null {
    return localStorage.getItem('ai_diary_session_id');
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å session_id –≤ localStorage
   */
  setCurrentSessionId(sessionId: string): void {
    localStorage.setItem('ai_diary_session_id', sessionId);
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å session_id –∏–∑ localStorage
   */
  clearCurrentSessionId(): void {
    localStorage.removeItem('ai_diary_session_id');
  }
}

export const aiDiaryService = new AIDiaryService();
