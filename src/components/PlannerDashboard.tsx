import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Button } from '@/components/ui/button';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { List, Lightbulb, CalendarIcon, Filter, X } from 'lucide-react';
import { format } from 'date-fns';
import { ru } from 'date-fns/locale';
import { cn } from '@/lib/utils';
import type { Activity, ActivityInput, ActivityFilters, Template } from '@/types/activity';
import { 
  prepareActivityForSubmit, 
  validateActivity, 
  templateToActivity,
  buildFilterParams 
} from '@/lib/activityHelpers';
import ActivityForm from './ActivityForm';
import ActivityList from './ActivityList';
import TemplateList from './TemplateList';

const WEBHOOK_URL = 'https://mentalbalans.com/webhook/planner-sync';

export default function PlannerDashboard() {
  const [activities, setActivities] = useState<Activity[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [userId, setUserId] = useState<string>('');
  const [userJwt, setUserJwt] = useState<string>('');
  const [selectedTemplate, setSelectedTemplate] = useState<ActivityInput | null>(null);
  const [filters, setFilters] = useState<ActivityFilters>({
    date: '',
    status: 'all',
    category: 'all',
  });
  const { toast } = useToast();

  useEffect(() => {
    const getSession = async () => {
      const { data: { session } } = await supabase.auth.getSession();
      if (session) {
        setUserId(session.user.id);
        setUserJwt(session.access_token);
      }
    };
    getSession();
  }, []);

  useEffect(() => {
    if (userId && userJwt) {
      fetchActivities();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [userId, userJwt, filters.date, filters.status, filters.category]);

  const fetchActivities = async () => {
    if (!userId || !userJwt) return;

    console.log('üìã Fetching activities with filters:', filters);
    setIsLoading(true);
    try {
      const filterParams = buildFilterParams(filters);

      console.log('üåê Webhook request:', {
        action: 'list',
        filters: filterParams,
        user_id: userId
      });

      const response = await fetch(WEBHOOK_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userJwt,
          user_id: userId,
          action: 'list',
          filters: filterParams,
        }),
      });

      if (!response.ok) {
        console.error('‚ùå Response not OK:', response.status, response.statusText);
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
      const text = await response.text();
      if (!text || text.trim() === '') {
        console.warn('‚ö†Ô∏è Empty response from webhook');
        setActivities([]);
        return;
      }

      let data;
      try {
        data = JSON.parse(text);
      } catch (parseError) {
        console.error('‚ùå JSON parse error:', parseError, 'Response text:', text);
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }

      console.log('‚úÖ Activities loaded:', data);
      setActivities(data.activities || []);
    } catch (error) {
      console.error('‚ùå Error fetching activities:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleWebhookRequest = async (action: string, data?: any) => {
    console.log(`üöÄ Webhook ${action}:`, data);
    try {
      const response = await fetch(WEBHOOK_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userJwt,
          user_id: userId,
          action,
          data,
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Webhook error response:', response.status, errorText);
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
      const text = await response.text();
      if (!text || text.trim() === '') {
        console.warn('‚ö†Ô∏è Empty response from webhook - fetching activities anyway');
        await fetchActivities();
        return true;
      }

      let result;
      try {
        result = JSON.parse(text);
      } catch (parseError) {
        console.error('‚ùå JSON parse error:', parseError, 'Response text:', text);
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }

      console.log('‚úÖ Webhook success:', result);

      await fetchActivities();
      return true;
    } catch (error) {
      console.error('‚ùå Webhook error:', error);
      throw error;
    }
  };

  const handleCreate = async (activity: ActivityInput) => {
    console.log('‚ûï Creating activity:', activity);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const validationError = validateActivity(activity);
    if (validationError) {
      console.warn('‚ö†Ô∏è Validation failed:', validationError);
      toast({
        title: validationError.title,
        description: validationError.description,
        variant: 'destructive',
      });
      return;
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏)
    const preparedActivity = prepareActivityForSubmit(activity);
    console.log('üìù Prepared activity:', preparedActivity);

    setIsLoading(true);
    try {
      await handleWebhookRequest('create', preparedActivity);
      toast({
        title: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞',
        description: '–ù–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞',
      });
      setSelectedTemplate(null);
    } catch (error) {
      console.error('‚ùå Create error:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleUpdate = async (id: string, activity: ActivityInput) => {
    console.log('‚úèÔ∏è Updating activity:', { id, ...activity });
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏)
    const preparedActivity = prepareActivityForSubmit(activity);

    setIsLoading(true);
    try {
      await handleWebhookRequest('update', { id, ...preparedActivity });
      toast({
        title: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
        description: '–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
      });
    } catch (error) {
      console.error('‚ùå Update error:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    console.log('üóëÔ∏è Deleting activity:', id);
    setIsLoading(true);
    try {
      await handleWebhookRequest('delete', { id });
      toast({
        title: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞',
        description: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞',
      });
    } catch (error) {
      console.error('‚ùå Delete error:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleToggleComplete = async (id: string, currentStatus: Activity['status']) => {
    console.log('‚úÖ Toggling completion:', { id, currentStatus });
    setIsLoading(true);
    try {
      const newStatus = currentStatus === 'completed' ? 'planned' : 'completed';
      const completionNote = newStatus === 'completed' ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' : '';
      
      await handleWebhookRequest('complete', { 
        id, 
        status: newStatus,
        completion_note: completionNote 
      });
      
      toast({
        title: newStatus === 'completed' ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' : '–û—Ç–º–µ–Ω–µ–Ω–∞ –æ—Ç–º–µ—Ç–∫–∞',
        description: newStatus === 'completed' ? '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è' : '–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω',
      });
    } catch (error) {
      console.error('‚ùå Toggle error:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleSelectTemplate = (template: Template) => {
    const activityData = templateToActivity(template);
    console.log('üìã Template selected:', activityData);
    setSelectedTemplate(activityData);
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-semibold">–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π</h2>
        {selectedTemplate ? (
          <ActivityForm
            isLoading={isLoading}
            onSubmit={handleCreate}
            activity={selectedTemplate}
            trigger={null}
          />
        ) : (
          <ActivityForm isLoading={isLoading} onSubmit={handleCreate} />
        )}
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="flex flex-wrap gap-3 p-4 bg-muted/50 rounded-lg">
        <div className="flex items-center gap-2">
          <Filter className="w-4 h-4 text-muted-foreground" />
          <span className="text-sm font-medium">–§–∏–ª—å—Ç—Ä—ã:</span>
        </div>

        {/* –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ */}
        <Popover>
          <PopoverTrigger asChild>
            <Button
              variant="outline"
              size="sm"
              className={cn(
                'justify-start text-left font-normal',
                !filters.date && 'text-muted-foreground'
              )}
            >
              <CalendarIcon className="w-4 h-4" />
              {filters.date ? format(new Date(filters.date), 'PPP', { locale: ru }) : '–î–∞—Ç–∞'}
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-auto p-0" align="start">
            <Calendar
              mode="single"
              selected={filters.date ? new Date(filters.date) : undefined}
              onSelect={(date) => setFilters(prev => ({ ...prev, date: date ? format(date, 'yyyy-MM-dd') : '' }))}
              initialFocus
              className="p-3 pointer-events-auto"
            />
          </PopoverContent>
        </Popover>

        {/* –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É */}
        <Select
          value={filters.status}
          onValueChange={(value: typeof filters.status) =>
            setFilters(prev => ({ ...prev, status: value }))
          }
        >
          <SelectTrigger className="w-[180px] h-9">
            <SelectValue placeholder="–°—Ç–∞—Ç—É—Å" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</SelectItem>
            <SelectItem value="planned">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</SelectItem>
            <SelectItem value="completed">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</SelectItem>
            <SelectItem value="cancelled">–û—Ç–º–µ–Ω–µ–Ω–æ</SelectItem>
          </SelectContent>
        </Select>

        {/* –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
        <Select
          value={filters.category}
          onValueChange={(value: typeof filters.category) =>
            setFilters(prev => ({ ...prev, category: value }))
          }
        >
          <SelectTrigger className="w-[180px] h-9">
            <SelectValue placeholder="–ö–∞—Ç–µ–≥–æ—Ä–∏—è" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</SelectItem>
            <SelectItem value="self_care">–ó–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ</SelectItem>
            <SelectItem value="task">–ó–∞–¥–∞—á–∞</SelectItem>
            <SelectItem value="habit">–ü—Ä–∏–≤—ã—á–∫–∞</SelectItem>
            <SelectItem value="ritual">–†–∏—Ç—É–∞–ª</SelectItem>
            <SelectItem value="routine">–†—É—Ç–∏–Ω–∞</SelectItem>
          </SelectContent>
        </Select>

        {/* –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
        {(filters.date || filters.status !== 'all' || filters.category !== 'all') && (
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setFilters({ date: '', status: 'all', category: 'all' })}
            className="gap-1"
          >
            <X className="w-4 h-4" />
            –°–±—Ä–æ—Å–∏—Ç—å
          </Button>
        )}
      </div>

      <Tabs defaultValue="activities" className="space-y-4">
        <TabsList className="grid w-full grid-cols-2 max-w-md">
          <TabsTrigger value="activities" className="gap-2">
            <List className="w-4 h-4" />
            –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
          </TabsTrigger>
          <TabsTrigger value="templates" className="gap-2">
            <Lightbulb className="w-4 h-4" />
            –®–∞–±–ª–æ–Ω—ã
          </TabsTrigger>
        </TabsList>

        <TabsContent value="activities" className="space-y-4">
          <ActivityList
            activities={activities}
            isLoading={isLoading}
            onToggleComplete={handleToggleComplete}
            onUpdate={handleUpdate}
            onDelete={handleDelete}
          />
        </TabsContent>

        <TabsContent value="templates" className="space-y-4">
          <TemplateList onSelectTemplate={handleSelectTemplate} />
        </TabsContent>
      </Tabs>
    </div>
  );
}
